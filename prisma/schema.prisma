generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String               @id @default(cuid())
  name                       String?
  email                      String               @unique
  emailVerified              DateTime?
  image                      String?
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  encryptionKey              String?
  hasCompletedOnboarding     Boolean              @default(false)
  timezone                   String?              @default("UTC")
  calendarIntegrationEnabled Boolean              @default(false)
  currentInstitution         String?
  fieldsOfStudy              String?
  background                 String?
  aiAssistantName            String?
  aiPersonality              String?
  accounts                   Account[]
  goals                      Goal[]
  journals                   Journal[]
  letters                    LetterToFutureSelf[]
  readings                   Reading[]
  roadmaps                   Roadmap[]
  sessions                   Session[]
  userCustomizations         UserCustomization?
}

model UserCustomization {
  id                   String   @id @default(cuid())
  userId               String   @unique
  journalPrompts       String[]
  notificationSettings Json
  privacySettings      Json
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String    @id @default(cuid())
  userId      String
  title       String
  description String?
  targetDate  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmaps    Roadmap[]
}

model Journal {
  id                String          @id @default(cuid())
  userId            String
  title             String?
  content           String
  mood              String?
  tags              String[]
  isInCoolingPeriod Boolean         @default(true)
  canEditUntil      DateTime
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  date              DateTime        @default(now())
  aiConversations   AiConversation?
  dailySummary      DailySummary?
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AiConversation {
  id        String   @id @default(cuid())
  journalId String   @unique
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  journal   Journal  @relation(fields: [journalId], references: [id], onDelete: Cascade)
}

model DailySummary {
  id              String         @id @default(cuid())
  journalId       String         @unique
  content         String
  mood            String?
  keyTopics       String[]
  isHiddenFromAI  Boolean        @default(false)
  weeklySummaryId String?
  createdAt       DateTime       @default(now())
  summaryDate     DateTime
  journal         Journal        @relation(fields: [journalId], references: [id], onDelete: Cascade)
  weeklySummary   WeeklySummary? @relation(fields: [weeklySummaryId], references: [id])
}

model WeeklySummary {
  id               String          @id @default(cuid())
  userId           String
  content          String
  weekStartDate    DateTime
  weekEndDate      DateTime
  generatedProof   String?
  monthlySummaryId String?
  createdAt        DateTime        @default(now())
  dailySummaries   DailySummary[]
  monthlySummary   MonthlySummary? @relation(fields: [monthlySummaryId], references: [id])
}

model MonthlySummary {
  id              String          @id @default(cuid())
  userId          String
  content         String
  monthStartDate  DateTime
  monthEndDate    DateTime
  generatedProof  String?
  yearlySummaryId String?
  createdAt       DateTime        @default(now())
  yearlySummary   YearlySummary?  @relation(fields: [yearlySummaryId], references: [id])
  weeklySummaries WeeklySummary[]
}

model YearlySummary {
  id               String           @id @default(cuid())
  userId           String
  content          String
  yearStartDate    DateTime
  yearEndDate      DateTime
  generatedProof   String?
  createdAt        DateTime         @default(now())
  monthlySummaries MonthlySummary[]
}

model Roadmap {
  id         String        @id @default(cuid())
  userId     String
  goalId     String?
  title      String
  status     RoadmapStatus @default(ACTIVE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  milestones Milestone[]
  goal       Goal?         @relation(fields: [goalId], references: [id])
  User       User          @relation(fields: [userId], references: [id])
}

model Milestone {
  id           String          @id @default(cuid())
  roadmapId    String
  title        String
  description  String?
  dueDate      String?
  status       MilestoneStatus @default(PENDING)
  order        Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  calendarSync CalendarSync?
  roadmap      Roadmap         @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
}

model LetterToFutureSelf {
  id         String   @id @default(cuid())
  userId     String
  title      String?
  content    String
  unsealDate DateTime
  isSealed   Boolean  @default(false)
  isUnsealed Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reading {
  id            String              @id @default(cuid())
  userId        String
  docToken      String              @unique
  title         String?
  uploadDate    DateTime            @default(now())
  journalLinkId String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  totalPages    Int?
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  readingLogs   ReadingLog[]
  reflections   ReadingReflection[]
}

model ReadingReflection {
  id         String   @id @default(cuid())
  readingId  String
  question   String
  response   String
  aiInsights String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  reading    Reading  @relation(fields: [readingId], references: [id], onDelete: Cascade)
}

model ReadingLog {
  id          String   @id @default(cuid())
  readingId   String
  startPage   String?
  endPage     String?
  notes       String?
  sessionDate String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reading     Reading  @relation(fields: [readingId], references: [id], onDelete: Cascade)

  @@index([readingId])
}

model DocumentEmbedding {
  id        String                 @id @default(cuid())
  docToken  String
  content   String
  embedding Unsupported("vector")?
  metadata  Json?
  createdAt DateTime               @default(now())

  @@index([docToken])
}

model CalendarSync {
  id              String    @id @default(cuid())
  milestoneId     String    @unique
  calendarEventId String
  calendarId      String    @default("primary")
  lastSynced      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  milestone       Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
}

enum RoadmapStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}
